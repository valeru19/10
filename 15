import java.io.*;
import java.text.DecimalFormat;

public class test15 {
    public static final String DELIMITER = "STROKA";
    public static void main(String[] args) {
        DecimalFormat dec = new DecimalFormat("#.#");
        try {
            File resultFile = new File("C:\\Users\\Валерий\\Desktop\\result.txt");
            FileWriter resultWriter = new FileWriter(resultFile);
            resultWriter.write("№ участка\tКол-во зон с животными\t% S, занимаемой животными\tкол-во водоемов\n");
            File territoryFile = new File("C:\\Users\\Валерий\\Desktop\\territory.txt");
            File animalsFile = new File("C:\\Users\\Валерий\\Desktop\\animals.txt");
            File natureFile = new File("C:\\Users\\Валерий\\Desktop\\nature.txt");
            BufferedReader territoryReader = new BufferedReader(new FileReader(territoryFile));
            BufferedReader animalsReader = new BufferedReader(new FileReader(animalsFile));
            BufferedReader natureReader = new BufferedReader(new FileReader(natureFile));
            while (territoryReader.ready()) {
                String territoryLine = territoryReader.readLine();
                if (!territoryLine.contains(DELIMITER)) {
                    String[] territoryCoords = territoryLine.split(",");
                    int num = Integer.parseInt(territoryCoords[0]);
                    double x1 = Double.parseDouble(territoryCoords[1]);
                    double y1 = Double.parseDouble(territoryCoords[2]);
                    double x2 = Double.parseDouble(territoryCoords[3]);
                    double y2 = Double.parseDouble(territoryCoords[4]);
                    double x3 = Double.parseDouble(territoryCoords[5]);
                    double y3 = Double.parseDouble(territoryCoords[6]);
                    double x4 = Double.parseDouble(territoryCoords[7]);
                    double y4 = Double.parseDouble(territoryCoords[8]);
                    int wolfCount = 0;
                    int hareCount = 0;
                    while (animalsReader.ready()) {
                        String animalsLine = animalsReader.readLine();
                        if (!animalsLine.contains(DELIMITER)) {
                            String[] animalData = animalsLine.split(",");
                            String animalType = animalData[0];
                            double animalX = Double.parseDouble(animalData[1]);
                            double animalY = Double.parseDouble(animalData[2]);
                            if (isPointInsidePolygon(animalX, animalY, x1, y1, x2, y2, x3, y3, x4, y4)) {
                                if (animalType.equals("wolf")) {
                                    wolfCount++;
                                } else if (animalType.equals("hare")) {
                                    hareCount++;
                                }
                            }
                        }
                    }
                    animalsReader.close();
                    animalsReader = new BufferedReader(new FileReader(animalsFile));
                    int lakeCount = 0;
                    int springCount = 0;
                    while (natureReader.ready()) {
                        String natureLine = natureReader.readLine();
                        if (!natureLine.contains(DELIMITER)) {
                            String[] natureData = natureLine.split(",");
                            String natureType = natureData[0];
                            double natureX = Double.parseDouble(natureData[1]);
                            double natureY = Double.parseDouble(natureData[2]);
                            double natureRadius = Double.parseDouble(natureData[3]);
                            if (isPointInsidePolygon(natureX, natureY, x1, y1, x2, y2, x3, y3, x4, y4)) {
                                if (natureType.equals("lake")) {
                                    lakeCount++;
                                } else if (natureType.equals("spring")) {
                                    springCount++;
                                }
                            }
                        }
                    }
                    natureReader.close();
                    natureReader = new BufferedReader(new FileReader(natureFile));

                    double territoryArea = getPolygonArea(x1, y1, x2, y2, x3, y3, x4, y4);
                    double animalArea = (wolfCount + hareCount) * Math.PI * Math.pow(5, 2);
                    double animalPercent = animalArea / territoryArea * 100;
                    resultWriter.write("\t"+num + "\t\t" + (wolfCount + hareCount) + "\t\t\t\t\t" + dec.format(animalPercent) + "\t\t\t\t" + lakeCount + "\n");
                }
            }
            resultWriter.flush();
            resultWriter.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static boolean isPointInsidePolygon(double x, double y, double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4) {
        double[] xp = {x1, x2, x3, x4};
        double[] yp = {y1, y2, y3, y4};

        boolean inside = false;
        for (int i = 0, j = xp.length - 1; i < xp.length; j = i++) {
            if ((yp[i] > y) != (yp[j] > y) && (x < (xp[j] - xp[i]) * (y - yp[i]) / (yp[j] - yp[i]) + xp[i])) {
                inside = !inside;
            }
        }
        return inside;
    }

    public static double getPolygonArea(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4) {
        double area = Math.abs(0.5 * (x1 * y2 + x2 * y3 + x3 * y4 + x4 * y1 - x2 * y1 - x3 * y2 - x4 * y3 - x1 * y4));
        return area;
    }
}
